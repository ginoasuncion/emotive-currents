[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "emotive-currents"
version = "0.1.0"
description = "A project for analyzing emotive currents"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Gino Asuncion", email = "gino@example.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Add these dependencies to your existing pyproject.toml
dependencies = [ # Compatible with Intel Mac
    "transformers>=4.30.0",
    "datasets>=2.14.0",
    "scikit-learn>=1.3.0",
    # Data handling
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    # HTTP requests
    "requests>=2.31.0",
    # Environment variables
    "python-dotenv>=1.0.0",
    # ML experiment tracking
    "mlflow>=2.11.3",
    # Visualization and utilities
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "tqdm>=4.65.0",
    # Web framework (for later steps)
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.0.0",
    "dvc[gs]>=3.60.1",
    "certifi>=2025.6.15",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0", 
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    
    # ML dev tools
    "accelerate>=0.20.0",  # For faster training
    "tensorboard>=2.13.0", # For training visualization
]

[project.urls]
Homepage = "https://github.com/ginoasuncion/emotive-currents"
Repository = "https://github.com/ginoasuncion/emotive-currents.git"
Issues = "https://github.com/ginoasuncion/emotive-currents/issues"

# Hatchling configuration
[tool.hatch.build.targets.wheel]
packages = ["src/emotive_currents"]

# UV configuration
[tool.uv]
dev-dependencies = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration (updated format)
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when you want strict typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

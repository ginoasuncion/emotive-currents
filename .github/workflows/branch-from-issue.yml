name: Create Branch from Issue

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  create-branch:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.state == 'open' && 
       contains(github.event.comment.body, '/create-branch'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract issue info
      id: issue-info
      run: |
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ISSUE_TITLE="${{ github.event.issue.title }}"
        
        # Clean the title for branch name (remove special chars, convert to lowercase)
        CLEAN_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        
        # Create branch name format: issue-{number}-{cleaned-title}
        BRANCH_NAME="issue-${ISSUE_NUMBER}-${CLEAN_TITLE}"
        
        # Truncate if too long (max 50 chars)
        if [ ${#BRANCH_NAME} -gt 50 ]; then
          BRANCH_NAME=$(echo "$BRANCH_NAME" | cut -c1-47)...
        fi
        
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "issue-number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue-title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
    
    - name: Create branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create and push the new branch
        git checkout -b ${{ steps.issue-info.outputs.branch-name }}
        git push origin ${{ steps.issue-info.outputs.branch-name }}
    
    - name: Comment on issue
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = '${{ steps.issue-info.outputs.branch-name }}';
          const issueNumber = ${{ steps.issue-info.outputs.issue-number }};
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `ðŸŒ± **Branch created!**
            
            A new branch has been automatically created for this issue:
            
            **Branch:** \`${branchName}\`
            
            You can start working on this issue by checking out the branch:
            \`\`\`bash
            git fetch origin
            git checkout ${branchName}
            \`\`\`
            
            Or create a codespace directly from this branch:
            [Open in Codespace](https://github.com/${context.repo.owner}/${context.repo.repo}/codespaces/new?ref=${branchName})
            
            When you're ready, create a pull request to merge your changes back to main.`
          });
    
    - name: Add branch link to issue
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = '${{ steps.issue-info.outputs.branch-name }}';
          const issueNumber = ${{ steps.issue-info.outputs.issue-number }};
          
          // Add a label to indicate branch was created
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            labels: ['branch-created']
          });
          
          // Update issue with development link (if not already present)
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber
          });
          
          const currentBody = issue.data.body || '';
          const developmentSection = `

---

## ðŸš€ Development

**Branch:** [\`${branchName}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branchName})
**Codespace:** [Open in Codespace](https://github.com/${context.repo.owner}/${context.repo.repo}/codespaces/new?ref=${branchName})`;
          
          if (!currentBody.includes('## ðŸš€ Development')) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: currentBody + developmentSection
            });
          }
